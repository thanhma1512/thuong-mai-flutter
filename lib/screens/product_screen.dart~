import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/product_provider.dart';
import 'add_product_screen.dart';
import 'package:intl/intl.dart';


class ProductScreen extends StatefulWidget {
  @override
  _ProductScreenState createState() => _ProductScreenState();
}

class _ProductScreenState extends State<ProductScreen> {
  bool _isLoading = true;
  String _searchQuery = "";
  String _selectedCategory = "T·∫•t c·∫£"; // üî• B·ªô l·ªçc danh m·ª•c
  List<String> categories = ["T·∫•t c·∫£", "ƒêi·ªán tho·∫°i", "Laptop", "Ph·ª• ki·ªán"];

  @override
  void initState() {
    super.initState();
    _loadProducts();
  }

  Future<void> _loadProducts() async {
    await Provider.of<ProductProvider>(context, listen: false).fetchProducts();
    setState(() {
      _isLoading = false;
    });
  }

  void _deleteProduct(String productId) async {
    setState(() {
      _isLoading = true;
    });
    await Provider.of<ProductProvider>(context, listen: false).deleteProduct(productId);
    await _loadProducts();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("‚úÖ S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a!")),
    );
  }

  @override
  Widget build(BuildContext context) {
    final productProvider = Provider.of<ProductProvider>(context);
    final filteredProducts = productProvider.filteredProducts(_searchQuery, _selectedCategory);

    return Scaffold(
      appBar: AppBar(
        title: Text("üì¶ Danh s√°ch s·∫£n ph·∫©m"),
        actions: [
          IconButton(
            icon: Icon(Icons.add),
            onPressed: () => Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => AddProductScreen()),
            ).then((_) => _loadProducts()), // üî• Load l·∫°i sau khi th√™m
          ),
        ],
      ),
      body: Column(
        children: [
          // üîç Thanh t√¨m ki·∫øm
          Padding(
            padding: EdgeInsets.all(8.0),
            child: TextField(
              onChanged: (value) {
                setState(() {
                  _searchQuery = value;
                });
              },
              decoration: InputDecoration(
                labelText: "üîç T√¨m ki·∫øm s·∫£n ph·∫©m",
                prefixIcon: Icon(Icons.search),
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
              ),
            ),
          ),

          // üî• B·ªô l·ªçc danh m·ª•c
          Padding(
            padding: EdgeInsets.symmetric(horizontal: 8.0),
            child: DropdownButtonFormField<String>(
              value: _selectedCategory,
              onChanged: (value) {
                setState(() {
                  _selectedCategory = value!;
                });
              },
              items: categories.map((category) {
                return DropdownMenuItem(value: category, child: Text(category));
              }).toList(),
              decoration: InputDecoration(
                labelText: "üìÇ Ch·ªçn danh m·ª•c",
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
              ),
            ),
          ),

          // üì¶ Danh s√°ch s·∫£n ph·∫©m
          Expanded(
            child: _isLoading
                ? Center(child: CircularProgressIndicator())
                : filteredProducts.isEmpty
                ? Center(child: Text("üö´ Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o!"))
                : ListView.builder(
              itemCount: filteredProducts.length,
              itemBuilder: (context, index) {
                final product = filteredProducts[index];

                return Card(
                  margin: EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                  child: ListTile(
                    leading: Image.network(
                      product.imageUrl,
                      width: 50,
                      height: 50,
                      fit: BoxFit.cover,
                      errorBuilder: (context, error, stackTrace) =>
                          Icon(Icons.image_not_supported, size: 50, color: Colors.grey),
                    ),
                    title: Text(product.name),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          "${NumberFormat("#,###", "vi_VN").format(product.price)} ‚Ç´",
                          style: TextStyle(fontSize: 14, color: Colors.redAccent),
                        ),
                        Text(
                          "Kho: ${product.quantity} s·∫£n ph·∫©m",
                          style: TextStyle(
                            color: product.quantity > 0 ? Colors.green : Colors.red,
                          ),
                        ),
                      ],
                    ),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        // ‚úèÔ∏è Ch·ªânh s·ª≠a s·∫£n ph·∫©m
                        IconButton(
                          icon: Icon(Icons.edit, color: Colors.blue),
                          onPressed: () {
                            Navigator.pushNamed(
                              context,
                              '/edit_product_screen',
                              arguments: product, // ‚úÖ Truy·ªÅn tham s·ªë product
                            ).then((_) => _loadProducts());
                          },
                        ),

                        // üóëÔ∏è X√≥a s·∫£n ph·∫©m
                        IconButton(
                          icon: Icon(Icons.delete, color: Colors.red),
                          onPressed: () {
                            showDialog(
                              context: context,
                              builder: (ctx) => AlertDialog(
                                title: Text("‚ö† X√≥a s·∫£n ph·∫©m"),
                                content: Text("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y?"),
                                actions: [
                                  TextButton(
                                    child: Text("H·ªßy"),
                                    onPressed: () => Navigator.of(ctx).pop(),
                                  ),
                                  TextButton(
                                    child: Text("X√≥a", style: TextStyle(color: Colors.red)),
                                    onPressed: () {
                                      _deleteProduct(product.id);
                                      Navigator.of(ctx).pop();
                                    },
                                  ),
                                ],
                              ),
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
